# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import bchrpc_pb2 as bchrpc__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in bchrpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class bchrpcStub(object):
    """bchrpc contains a set of RPCs that can be exposed publicly via
    the command line options. This service could be authenticated or
    unauthenticated.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMempoolInfo = channel.unary_unary(
                '/pb.bchrpc/GetMempoolInfo',
                request_serializer=bchrpc__pb2.GetMempoolInfoRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetMempoolInfoResponse.FromString,
                _registered_method=True)
        self.GetMempool = channel.unary_unary(
                '/pb.bchrpc/GetMempool',
                request_serializer=bchrpc__pb2.GetMempoolRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetMempoolResponse.FromString,
                _registered_method=True)
        self.GetBlockchainInfo = channel.unary_unary(
                '/pb.bchrpc/GetBlockchainInfo',
                request_serializer=bchrpc__pb2.GetBlockchainInfoRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetBlockchainInfoResponse.FromString,
                _registered_method=True)
        self.GetBlockInfo = channel.unary_unary(
                '/pb.bchrpc/GetBlockInfo',
                request_serializer=bchrpc__pb2.GetBlockInfoRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetBlockInfoResponse.FromString,
                _registered_method=True)
        self.GetBlock = channel.unary_unary(
                '/pb.bchrpc/GetBlock',
                request_serializer=bchrpc__pb2.GetBlockRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetBlockResponse.FromString,
                _registered_method=True)
        self.GetRawBlock = channel.unary_unary(
                '/pb.bchrpc/GetRawBlock',
                request_serializer=bchrpc__pb2.GetRawBlockRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetRawBlockResponse.FromString,
                _registered_method=True)
        self.GetBlockFilter = channel.unary_unary(
                '/pb.bchrpc/GetBlockFilter',
                request_serializer=bchrpc__pb2.GetBlockFilterRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetBlockFilterResponse.FromString,
                _registered_method=True)
        self.GetHeaders = channel.unary_unary(
                '/pb.bchrpc/GetHeaders',
                request_serializer=bchrpc__pb2.GetHeadersRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetHeadersResponse.FromString,
                _registered_method=True)
        self.GetTransaction = channel.unary_unary(
                '/pb.bchrpc/GetTransaction',
                request_serializer=bchrpc__pb2.GetTransactionRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetTransactionResponse.FromString,
                _registered_method=True)
        self.GetRawTransaction = channel.unary_unary(
                '/pb.bchrpc/GetRawTransaction',
                request_serializer=bchrpc__pb2.GetRawTransactionRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetRawTransactionResponse.FromString,
                _registered_method=True)
        self.GetAddressTransactions = channel.unary_unary(
                '/pb.bchrpc/GetAddressTransactions',
                request_serializer=bchrpc__pb2.GetAddressTransactionsRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetAddressTransactionsResponse.FromString,
                _registered_method=True)
        self.GetRawAddressTransactions = channel.unary_unary(
                '/pb.bchrpc/GetRawAddressTransactions',
                request_serializer=bchrpc__pb2.GetRawAddressTransactionsRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetRawAddressTransactionsResponse.FromString,
                _registered_method=True)
        self.GetAddressUnspentOutputs = channel.unary_unary(
                '/pb.bchrpc/GetAddressUnspentOutputs',
                request_serializer=bchrpc__pb2.GetAddressUnspentOutputsRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetAddressUnspentOutputsResponse.FromString,
                _registered_method=True)
        self.GetUnspentOutput = channel.unary_unary(
                '/pb.bchrpc/GetUnspentOutput',
                request_serializer=bchrpc__pb2.GetUnspentOutputRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetUnspentOutputResponse.FromString,
                _registered_method=True)
        self.GetMerkleProof = channel.unary_unary(
                '/pb.bchrpc/GetMerkleProof',
                request_serializer=bchrpc__pb2.GetMerkleProofRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetMerkleProofResponse.FromString,
                _registered_method=True)
        self.GetSlpTokenMetadata = channel.unary_unary(
                '/pb.bchrpc/GetSlpTokenMetadata',
                request_serializer=bchrpc__pb2.GetSlpTokenMetadataRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetSlpTokenMetadataResponse.FromString,
                _registered_method=True)
        self.GetSlpParsedScript = channel.unary_unary(
                '/pb.bchrpc/GetSlpParsedScript',
                request_serializer=bchrpc__pb2.GetSlpParsedScriptRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetSlpParsedScriptResponse.FromString,
                _registered_method=True)
        self.GetSlpTrustedValidation = channel.unary_unary(
                '/pb.bchrpc/GetSlpTrustedValidation',
                request_serializer=bchrpc__pb2.GetSlpTrustedValidationRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetSlpTrustedValidationResponse.FromString,
                _registered_method=True)
        self.GetSlpGraphSearch = channel.unary_unary(
                '/pb.bchrpc/GetSlpGraphSearch',
                request_serializer=bchrpc__pb2.GetSlpGraphSearchRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.GetSlpGraphSearchResponse.FromString,
                _registered_method=True)
        self.CheckSlpTransaction = channel.unary_unary(
                '/pb.bchrpc/CheckSlpTransaction',
                request_serializer=bchrpc__pb2.CheckSlpTransactionRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.CheckSlpTransactionResponse.FromString,
                _registered_method=True)
        self.SubmitTransaction = channel.unary_unary(
                '/pb.bchrpc/SubmitTransaction',
                request_serializer=bchrpc__pb2.SubmitTransactionRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.SubmitTransactionResponse.FromString,
                _registered_method=True)
        self.SubscribeTransactions = channel.unary_stream(
                '/pb.bchrpc/SubscribeTransactions',
                request_serializer=bchrpc__pb2.SubscribeTransactionsRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.TransactionNotification.FromString,
                _registered_method=True)
        self.SubscribeTransactionStream = channel.stream_stream(
                '/pb.bchrpc/SubscribeTransactionStream',
                request_serializer=bchrpc__pb2.SubscribeTransactionsRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.TransactionNotification.FromString,
                _registered_method=True)
        self.SubscribeBlocks = channel.unary_stream(
                '/pb.bchrpc/SubscribeBlocks',
                request_serializer=bchrpc__pb2.SubscribeBlocksRequest.SerializeToString,
                response_deserializer=bchrpc__pb2.BlockNotification.FromString,
                _registered_method=True)


class bchrpcServicer(object):
    """bchrpc contains a set of RPCs that can be exposed publicly via
    the command line options. This service could be authenticated or
    unauthenticated.
    """

    def GetMempoolInfo(self, request, context):
        """GetMempoolInfo returns the state of the current mempool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMempool(self, request, context):
        """GetMempool returns information about all transactions currently in the memory pool.
        Offers an option to return full transactions or just transactions hashes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockchainInfo(self, request, context):
        """GetBlockchainInfo returns data about the blockchain including the most recent
        block hash and height.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockInfo(self, request, context):
        """GetBlockInfo returns metadata and info for a specified block.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlock(self, request, context):
        """GetBlock returns detailed data for a block.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawBlock(self, request, context):
        """GetRawBlock returns a block in a serialized format.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockFilter(self, request, context):
        """GetBlockFilter returns the compact filter (cf) of a block as a Golomb-Rice encoded set.

        **Requires CfIndex**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHeaders(self, request, context):
        """GetHeaders takes a block locator object and returns a batch of no more than 2000
        headers. Upon parsing the block locator, if the server concludes there has been a
        fork, it will send headers starting at the fork point, or genesis if no blocks in
        the locator are in the best chain. If the locator is already at the tip no headers
        will be returned.
        see: bchd/bchrpc/documentation/wallet_operation.md
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransaction(self, request, context):
        """GetTransaction returns a transaction given a transaction hash.

        **Requires TxIndex**
        **Requires SlpIndex for slp related information **
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawTransaction(self, request, context):
        """GetRawTransaction returns a serialized transaction given a transaction hash.

        **Requires TxIndex**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddressTransactions(self, request, context):
        """GetAddressTransactions returns the transactions for the given address. Offers offset,
        limit, and from block options.

        **Requires AddressIndex**
        **Requires SlpIndex for slp related information **
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRawAddressTransactions(self, request, context):
        """GetRawAddressTransactions returns the serialized raw transactions for
        the given address. Offers offset, limit, and from block options.

        **Requires AddressIndex**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddressUnspentOutputs(self, request, context):
        """GetAddressUnspentOutputs returns all the unspent transaction outputs
        for the given address.

        **Requires AddressIndex**
        **Requires SlpIndex for slp related information **
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnspentOutput(self, request, context):
        """GetUnspentOutput takes an unspent output in the utxo set and returns
        the utxo metadata or not found.

        **Requires SlpIndex for slp related information **
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMerkleProof(self, request, context):
        """GetMerkleProof returns a Merkle (SPV) proof for a specific transaction
        in the provided block.

        **Requires TxIndex**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlpTokenMetadata(self, request, context):
        """GetSlpTokenMetadata return slp token metadata for one or more tokens.

        **Requires SlpIndex**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlpParsedScript(self, request, context):
        """GetSlpParsedScript returns marshalled object from parsing an slp pubKeyScript 
        using goslp package.  This endpoint does not require SlpIndex.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlpTrustedValidation(self, request, context):
        """GetSlpTrustedValidation returns slp validity related information for one or more transactions.

        **Requires SlpIndex**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlpGraphSearch(self, request, context):
        """GraphSearch returns all the transactions needed for a client to validate an SLP graph

        **Requires SlpIndex and SlpGraphSearch**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckSlpTransaction(self, request, context):
        """CheckSlpTransaction checks the validity of a supposed slp transaction before it is broadcasted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTransaction(self, request, context):
        """Submit a transaction to all connected peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTransactions(self, request, context):
        """SubscribeTransactions creates subscription to all relevant transactions based on
        the subscription filter.

        This RPC does not use bidirectional streams and therefore can be used
        with grpc-web. You will need to close and reopen the stream whenever
        you want to update the subscription filter. If you are not using grpc-web
        then SubscribeTransactionStream is more appropriate.

        **Requires TxIndex to receive input metadata**
        **Requires SlpIndex to receive slp input/output metadata, or SlpTokenMetadata**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTransactionStream(self, request_iterator, context):
        """SubscribeTransactionStream subscribes to relevant transactions based on
        the subscription requests. The parameters to filter transactions on can
        be updated by sending new SubscribeTransactionsRequest objects on the stream.

        NOTE: Because this RPC is using bi-directional streaming it cannot be used with
        grpc-web.

        **Requires TxIndex to receive input metadata**
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBlocks(self, request, context):
        """SubscribeBlocks creates a subscription for notifications of new blocks being
        connected to the blockchain or blocks being disconnected.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_bchrpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMempoolInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMempoolInfo,
                    request_deserializer=bchrpc__pb2.GetMempoolInfoRequest.FromString,
                    response_serializer=bchrpc__pb2.GetMempoolInfoResponse.SerializeToString,
            ),
            'GetMempool': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMempool,
                    request_deserializer=bchrpc__pb2.GetMempoolRequest.FromString,
                    response_serializer=bchrpc__pb2.GetMempoolResponse.SerializeToString,
            ),
            'GetBlockchainInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockchainInfo,
                    request_deserializer=bchrpc__pb2.GetBlockchainInfoRequest.FromString,
                    response_serializer=bchrpc__pb2.GetBlockchainInfoResponse.SerializeToString,
            ),
            'GetBlockInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockInfo,
                    request_deserializer=bchrpc__pb2.GetBlockInfoRequest.FromString,
                    response_serializer=bchrpc__pb2.GetBlockInfoResponse.SerializeToString,
            ),
            'GetBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlock,
                    request_deserializer=bchrpc__pb2.GetBlockRequest.FromString,
                    response_serializer=bchrpc__pb2.GetBlockResponse.SerializeToString,
            ),
            'GetRawBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRawBlock,
                    request_deserializer=bchrpc__pb2.GetRawBlockRequest.FromString,
                    response_serializer=bchrpc__pb2.GetRawBlockResponse.SerializeToString,
            ),
            'GetBlockFilter': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockFilter,
                    request_deserializer=bchrpc__pb2.GetBlockFilterRequest.FromString,
                    response_serializer=bchrpc__pb2.GetBlockFilterResponse.SerializeToString,
            ),
            'GetHeaders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHeaders,
                    request_deserializer=bchrpc__pb2.GetHeadersRequest.FromString,
                    response_serializer=bchrpc__pb2.GetHeadersResponse.SerializeToString,
            ),
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=bchrpc__pb2.GetTransactionRequest.FromString,
                    response_serializer=bchrpc__pb2.GetTransactionResponse.SerializeToString,
            ),
            'GetRawTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRawTransaction,
                    request_deserializer=bchrpc__pb2.GetRawTransactionRequest.FromString,
                    response_serializer=bchrpc__pb2.GetRawTransactionResponse.SerializeToString,
            ),
            'GetAddressTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddressTransactions,
                    request_deserializer=bchrpc__pb2.GetAddressTransactionsRequest.FromString,
                    response_serializer=bchrpc__pb2.GetAddressTransactionsResponse.SerializeToString,
            ),
            'GetRawAddressTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRawAddressTransactions,
                    request_deserializer=bchrpc__pb2.GetRawAddressTransactionsRequest.FromString,
                    response_serializer=bchrpc__pb2.GetRawAddressTransactionsResponse.SerializeToString,
            ),
            'GetAddressUnspentOutputs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddressUnspentOutputs,
                    request_deserializer=bchrpc__pb2.GetAddressUnspentOutputsRequest.FromString,
                    response_serializer=bchrpc__pb2.GetAddressUnspentOutputsResponse.SerializeToString,
            ),
            'GetUnspentOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnspentOutput,
                    request_deserializer=bchrpc__pb2.GetUnspentOutputRequest.FromString,
                    response_serializer=bchrpc__pb2.GetUnspentOutputResponse.SerializeToString,
            ),
            'GetMerkleProof': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMerkleProof,
                    request_deserializer=bchrpc__pb2.GetMerkleProofRequest.FromString,
                    response_serializer=bchrpc__pb2.GetMerkleProofResponse.SerializeToString,
            ),
            'GetSlpTokenMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSlpTokenMetadata,
                    request_deserializer=bchrpc__pb2.GetSlpTokenMetadataRequest.FromString,
                    response_serializer=bchrpc__pb2.GetSlpTokenMetadataResponse.SerializeToString,
            ),
            'GetSlpParsedScript': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSlpParsedScript,
                    request_deserializer=bchrpc__pb2.GetSlpParsedScriptRequest.FromString,
                    response_serializer=bchrpc__pb2.GetSlpParsedScriptResponse.SerializeToString,
            ),
            'GetSlpTrustedValidation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSlpTrustedValidation,
                    request_deserializer=bchrpc__pb2.GetSlpTrustedValidationRequest.FromString,
                    response_serializer=bchrpc__pb2.GetSlpTrustedValidationResponse.SerializeToString,
            ),
            'GetSlpGraphSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSlpGraphSearch,
                    request_deserializer=bchrpc__pb2.GetSlpGraphSearchRequest.FromString,
                    response_serializer=bchrpc__pb2.GetSlpGraphSearchResponse.SerializeToString,
            ),
            'CheckSlpTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckSlpTransaction,
                    request_deserializer=bchrpc__pb2.CheckSlpTransactionRequest.FromString,
                    response_serializer=bchrpc__pb2.CheckSlpTransactionResponse.SerializeToString,
            ),
            'SubmitTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTransaction,
                    request_deserializer=bchrpc__pb2.SubmitTransactionRequest.FromString,
                    response_serializer=bchrpc__pb2.SubmitTransactionResponse.SerializeToString,
            ),
            'SubscribeTransactions': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTransactions,
                    request_deserializer=bchrpc__pb2.SubscribeTransactionsRequest.FromString,
                    response_serializer=bchrpc__pb2.TransactionNotification.SerializeToString,
            ),
            'SubscribeTransactionStream': grpc.stream_stream_rpc_method_handler(
                    servicer.SubscribeTransactionStream,
                    request_deserializer=bchrpc__pb2.SubscribeTransactionsRequest.FromString,
                    response_serializer=bchrpc__pb2.TransactionNotification.SerializeToString,
            ),
            'SubscribeBlocks': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeBlocks,
                    request_deserializer=bchrpc__pb2.SubscribeBlocksRequest.FromString,
                    response_serializer=bchrpc__pb2.BlockNotification.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pb.bchrpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('pb.bchrpc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class bchrpc(object):
    """bchrpc contains a set of RPCs that can be exposed publicly via
    the command line options. This service could be authenticated or
    unauthenticated.
    """

    @staticmethod
    def GetMempoolInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetMempoolInfo',
            bchrpc__pb2.GetMempoolInfoRequest.SerializeToString,
            bchrpc__pb2.GetMempoolInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMempool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetMempool',
            bchrpc__pb2.GetMempoolRequest.SerializeToString,
            bchrpc__pb2.GetMempoolResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockchainInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetBlockchainInfo',
            bchrpc__pb2.GetBlockchainInfoRequest.SerializeToString,
            bchrpc__pb2.GetBlockchainInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetBlockInfo',
            bchrpc__pb2.GetBlockInfoRequest.SerializeToString,
            bchrpc__pb2.GetBlockInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetBlock',
            bchrpc__pb2.GetBlockRequest.SerializeToString,
            bchrpc__pb2.GetBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRawBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetRawBlock',
            bchrpc__pb2.GetRawBlockRequest.SerializeToString,
            bchrpc__pb2.GetRawBlockResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockFilter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetBlockFilter',
            bchrpc__pb2.GetBlockFilterRequest.SerializeToString,
            bchrpc__pb2.GetBlockFilterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHeaders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetHeaders',
            bchrpc__pb2.GetHeadersRequest.SerializeToString,
            bchrpc__pb2.GetHeadersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetTransaction',
            bchrpc__pb2.GetTransactionRequest.SerializeToString,
            bchrpc__pb2.GetTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRawTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetRawTransaction',
            bchrpc__pb2.GetRawTransactionRequest.SerializeToString,
            bchrpc__pb2.GetRawTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAddressTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetAddressTransactions',
            bchrpc__pb2.GetAddressTransactionsRequest.SerializeToString,
            bchrpc__pb2.GetAddressTransactionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRawAddressTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetRawAddressTransactions',
            bchrpc__pb2.GetRawAddressTransactionsRequest.SerializeToString,
            bchrpc__pb2.GetRawAddressTransactionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAddressUnspentOutputs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetAddressUnspentOutputs',
            bchrpc__pb2.GetAddressUnspentOutputsRequest.SerializeToString,
            bchrpc__pb2.GetAddressUnspentOutputsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUnspentOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetUnspentOutput',
            bchrpc__pb2.GetUnspentOutputRequest.SerializeToString,
            bchrpc__pb2.GetUnspentOutputResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMerkleProof(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetMerkleProof',
            bchrpc__pb2.GetMerkleProofRequest.SerializeToString,
            bchrpc__pb2.GetMerkleProofResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSlpTokenMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetSlpTokenMetadata',
            bchrpc__pb2.GetSlpTokenMetadataRequest.SerializeToString,
            bchrpc__pb2.GetSlpTokenMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSlpParsedScript(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetSlpParsedScript',
            bchrpc__pb2.GetSlpParsedScriptRequest.SerializeToString,
            bchrpc__pb2.GetSlpParsedScriptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSlpTrustedValidation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetSlpTrustedValidation',
            bchrpc__pb2.GetSlpTrustedValidationRequest.SerializeToString,
            bchrpc__pb2.GetSlpTrustedValidationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSlpGraphSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/GetSlpGraphSearch',
            bchrpc__pb2.GetSlpGraphSearchRequest.SerializeToString,
            bchrpc__pb2.GetSlpGraphSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckSlpTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/CheckSlpTransaction',
            bchrpc__pb2.CheckSlpTransactionRequest.SerializeToString,
            bchrpc__pb2.CheckSlpTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/pb.bchrpc/SubmitTransaction',
            bchrpc__pb2.SubmitTransactionRequest.SerializeToString,
            bchrpc__pb2.SubmitTransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/pb.bchrpc/SubscribeTransactions',
            bchrpc__pb2.SubscribeTransactionsRequest.SerializeToString,
            bchrpc__pb2.TransactionNotification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeTransactionStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/pb.bchrpc/SubscribeTransactionStream',
            bchrpc__pb2.SubscribeTransactionsRequest.SerializeToString,
            bchrpc__pb2.TransactionNotification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/pb.bchrpc/SubscribeBlocks',
            bchrpc__pb2.SubscribeBlocksRequest.SerializeToString,
            bchrpc__pb2.BlockNotification.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
